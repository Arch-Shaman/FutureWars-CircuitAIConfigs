// Mono-space font required
{
"economy": {
	// Plain list of energy UnitDef and its limit. AI sorts list by efficiency (inverse)
	// which is = cost * sizeX * sizeZ / make^2
	// With ZK v1.8.5.2:
	//   energysingu = 15.486420
	//   energygeo = 65.306122
	//   energyfusion = 80.000000
	//   energywind = 874.999939
	//   energysolar = 1750.000000
	// When e-stalling AI will build bottom-most energy that didn't reach its limit.
	// On normal AI will select top-most energy that it can build under 40 seconds.
	"energy": {
		// If land area >= 40% of the map then "land" config used, "water" otherwise
		"land": {
			// "<energy_def>": [<lower limit>, <upper limit>]
			// limit = random(<lower limit>..<upper limit>)
			"energyprosperity": [5],
			"energygeo": [10],
			"energysingu": [15],
			"energyfusion": [0, 10],
			"energysolar": [40],
			"staticenergyrtg": [0, 2]
		},
		"water": {
			"energysingu": [15],
			"energygeo": [20],
			"energyfusion": [8],
			"energywind": [40],
			"energysolar": [8, 12],
			"staticenergyrtg": [0, 2]
		},
		// income factor for energy, time is in seconds
		// [[<start_factor>, <start_time>], [<end_factor>, <end_time>]]
		"factor": [[0.10, 1], [40.0, 4200]],

		"pylon": ["energypylon", "energywind"]
	},

	// Scales metal income
	// ecoFactor = teamSize*eps_step+(1-eps_step)
	"eps_step": 0.30,

	// Mobile buildpower to metal income ratio
	"buildpower": 1.25,
	// Metal excess to income ratio, -1 to disable
	"excess": -1.0,
	// Mobile constructor to static constructor metal pull ratio
	// [[<value>, <start_mex_percent>], [<value>, <end_mex_percent>]]
//	"ms_pull": [[0.75, 0.0], [0.75, 0.10], [0.53, 0.25], [0.56, 0.40], [0.63, 0.44],[0.52, 0.48],[0.66, 0.52],[0.50, 0.56],[0.66, 0.60], [0.60, 0.65], [0.7, 0.66], [0.8, 0.66], [0.9, 0.75], [0.99, 0.90]],
	"ms_pull": [[5.0, 0.0], [0.45, 0.85], [0.55, 0.75]],
	// Max percent of mexes circuit team allowed to take.
	// If its <1.0 then expansion obeys ms_pull rule, if >=1.0 then ms_pull doesn't affect expansion (mex, pylon, energy).
	"mex_max": 8.0,  // 200%
	// Construction order delay in seconds, -1 to disable
	"build_delay": [[-1.0, 0], [-1.0, 0]],

	// New factory switch interval, in seconds (each new factory resets timer, switch event is also based on eco + caretakers)
	// switch = random(<min_interval>..<max_interval>)
	"switch": [400, 900],

	"terra": "terraunit",
	"airpad": "staticrearm",

	// Unknown UnitDef replacer
	"default": "turretmissile"
}
}
